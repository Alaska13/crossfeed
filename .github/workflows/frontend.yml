name: Frontend Pipeline

on:
  push:
    branches:
      - master
      - production
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"

  pull_request:
    branches:
      - master
      - production
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"

defaults:
  run:
    working-directory: ./frontend

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1
      - uses: actions/setup-node@v2.1.0
        with:
          node-version: "12.14"
      - name: Restore npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Security
        run: npm audit
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1
      - uses: actions/setup-node@v2.1.0
        with:
          node-version: "12.14"
      - name: Restore npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1
      - uses: actions/setup-node@v2.1.0
        with:
          node-version: "12.14"
      - name: Restore npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Test
        run: npm run test
  deploy:
    needs: [security, lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/production')
    steps:
      - uses: actions/checkout@v2.3.1
      - uses: actions/setup-node@v2.1.0
        with:
          node-version: "12.14"
      - name: Restore npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build Staging
        if: github.ref == 'refs/heads/master'
        run: npm run build
        env:
          REACT_APP_API_URL: https://stage.api.crossfeed2.dds.mil
          REACT_APP_USER_POOL_ID: us-west-2_jFr7nh5qn
          REACT_APP_USER_POOL_WEB_CLIENT_ID: 65uf7k8kb865f0haliltf6h99n
          REACT_APP_RECAPTCHA_CLIENT_KEY: 6LdE76gZAAAAAHVYhKyorCbfPMfIxrwl7G5MzxtA

      - name: Build Production
        if: github.ref == 'refs/heads/production'
        run: npm run build
        env:
          REACT_APP_API_URL: https://api.crossfeed2.dds.mil
          REACT_APP_USER_POOL_ID: us-west-2_jFr7nh5qn
          REACT_APP_USER_POOL_WEB_CLIENT_ID: 65uf7k8kb865f0haliltf6h99n

      - name: Deploy Staging
        if: github.ref == 'refs/heads/master'
        run: aws s3 sync build/ s3://stage.crossfeed2.dds.mil/ --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Deploy Production
        if: github.ref == 'refs/heads/production'
        run: aws s3 sync build/ s3://crossfeed2.dds.mil/ --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Invalidate Old Cache - Staging
        if: github.ref == 'refs/heads/master'
        run: aws cloudfront create-invalidation --distribution-id E1L9ZZ6QDXV2NQ --paths "/index.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Invalidate Old Cache - Production
        if: github.ref == 'refs/heads/production'
        run: aws cloudfront create-invalidation --distribution-id E1L9ZZ6QDXV2NQ --paths "/index.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Invalidate Old Cache - Production
        if: github.ref == 'refs/heads/production'
        run: aws cloudfront create-invalidation --distribution-id E3F1VQXKJQD68D --paths "/index.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
